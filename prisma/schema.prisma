// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Banner model for storing banner content
model Banner {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  content    String @db.Text
  buttonText String
  buttonLink String
  type       String @default("hero") // Values: "hero", "get-started", "news-media"

  // Relation to Image
  image   Image?  @relation(fields: [imageId], references: [id])
  imageId String? @db.Uuid

  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Image model for storing image metadata
model Image {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileName String
  fileSize Int
  mimeType String
  path     String  @unique
  alt      String?

  // Relation to Banner
  banners Banner[]

  // Relation to Article
  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Author model for storing author information
model Author {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  position    String
  biography   String  @db.Text
  authorImage String?

  // Relation to Article
  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Article model for storing article content
model Article {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  slug        String    @unique
  excerpt     String?   @db.Text
  content     String    @db.Text
  category    String
  status      String    @default("draft") // draft or published
  publishedAt DateTime?

  // Relation to Author
  author   Author? @relation(fields: [authorId], references: [id])
  authorId String? @db.Uuid

  // Relation to Image (featured image)
  featuredImage Image?  @relation(fields: [imageId], references: [id])
  imageId       String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
